
> music_shop_auth@1.0.0 test
> export FLAG=--exit && npm run test:run


> music_shop_auth@1.0.0 test:run
> npm run mysql:stop; npm run mysql:start && node test/db_check.js && mocha test/tests.js $FLAG; npm run mysql:stop


> music_shop_auth@1.0.0 mysql:stop
> docker container stop mysql-sandbox


> music_shop_auth@1.0.0 mysql:start
> export FLAG=-d DB_NAME=music_shop_db && npm run mysql:run


> music_shop_auth@1.0.0 mysql:run
> docker run $FLAG --rm -p 3306:3306 -v $(pwd)/schema:/docker-entrypoint-initdb.d --name=mysql-sandbox -e MYSQL_ALLOW_EMPTY_PASSWORD=root -e MYSQL_DATABASE=$DB_NAME mysql:8 mysqld --authentication_policy=mysql_native_password

115e1bf2e0eed6e5e3e5d18df4aef82293b4a51624935c55af1cfa0ebbf9347b
WAITING FOR MYSQL TO START
WAITING 1 SEC
WAITING 1 SEC
WAITING 1 SEC
WAITING 1 SEC
WAITING 1 SEC
WAITING 1 SEC
WAITING 1 SEC


  e-commerce site
    static files
      ✔ /style.css should serve style.css
      ✔ /index.js should serve index.js
      ✔ /images/acoustic.jpg should serve acoustic image
      ✔ /images/bass.jpg should serve bass image
      ✔ /images/picks.jpg should serve picks image
      ✔ /images/strat.jpg should serve strat image
      ✔ /images/ukulele.jpg should serve ukulele image
      ✔ /images/amp.jpg should serve amp image
      ✔ /images/cable.jpg should serve cable image
      ✔ /images/strap.jpg should serve strap image
      ✔ /images/strings.jpg should serve strings image
    e-commerce api
      authentication
        ✔ POST /api/user should create user and redirect to /login (74ms)
        ✔ POST /api/user should store password as hash (130ms)
        ✔ POST /api/user should return 400 if no login info is sent
        ✔ POST /api/user should return 400 if no username is sent
        ✔ POST /api/user should return 400 if no password is sent
        ✔ POST /api/login with correct username/pass should log user in and redirect to / (72ms)
        ✔ POST /api/login with wrong password return 400 (62ms)
        1) POST /api/login with wrong username return 400
        ✔ POST /api/login with no username/pass should return 400
        ✔ POST /api/login with no username return 400
        ✔ POST /api/login with no password return 400
        ✔ GET /api/logout should log user out and redirect to /
        ✔ POST /api/cart should redirect to /login if not logged in
        ✔ DELETE /api/cart should redirect to /login if not logged in
        ✔ PUT /api/cart/:id should redirect to /login if not logged in
        ✔ DELETE /api/cart/:id should redirect to /login if not logged in
        ✔ Logging in should allow access to cart page (103ms)
        ✔ Logging out should NOT allow access to cart page (85ms)
      cart
        ✔ POST /api/cart should add to cart
        ✔ POST /api/cart should return 404 if inventory item does not exist
        ✔ POST /api/cart should return 409 if item quantity is insufficient
        ✔ PUT /api/cart/:id should change cart quantity
        ✔ PUT /api/cart/:id should return 404 if cart item does not exist
        ✔ PUT /api/cart/:id should return 409 if inventory quantity insufficient
        ✔ DELETE /api/cart/:id should remove cart item
        ✔ DELETE /api/cart/:id should return 404 if cart item does not exist
        ✔ DELETE /api/cart/ should empty cart
    e-commerce front-end routes
      GET / - index/inventory page
        ✔ should return HTML for index page (50ms)
        ✔ should show login link instead of cart count if not logged in
        ✔ should show cart count if logged in (77ms)
        ✔ should render names of items
        ✔ should render items for sale in link tags that lead to product page
        ✔ should render price of items
        ✔ should render images of items
      GET /product/:id - product pages
        GET /product/1 - product page for Stratocaster
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (84ms)
          ✔ should show name (Stratocaster)
          ✔ should show price ($599.99)
          ✔ should show description (One of the most iconic electric guitars ever made.)
          ✔ should show image of product (images/strat.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=1
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/2 - product page for Mini Amp
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (79ms)
          ✔ should show name (Mini Amp)
          ✔ should show price ($49.99)
          ✔ should show description (A small practice amp that shouldn't annoy roommates or neighbors.)
          ✔ should show image of product (images/amp.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=2
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/3 - product page for Bass Guitar
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (79ms)
          ✔ should show name (Bass Guitar)
          ✔ should show price ($399.99)
          ✔ should show description (A four string electric bass guitar.)
          ✔ should show image of product (images/bass.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=3
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/4 - product page for Acoustic Guitar
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (79ms)
          ✔ should show name (Acoustic Guitar)
          ✔ should show price ($799.99)
          ✔ should show description (Perfect for campfire sing-alongs.)
          ✔ should show image of product (images/acoustic.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=4
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/5 - product page for Ukulele
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (79ms)
          ✔ should show name (Ukulele)
          ✔ should show price ($99.99)
          ✔ should show description (A four string tenor ukulele tuned GCEA.)
          ✔ should show image of product (images/ukulele.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=5
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/6 - product page for Strap
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (80ms)
          ✔ should show name (Strap)
          ✔ should show price ($29.99)
          ✔ should show description (Woven instrument strap keeps your guitar or bass strapped to you to allow playing while standing.)
          ✔ should show image of product (images/strap.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=6
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/7 - product page for Assortment of Picks
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (83ms)
          ✔ should show name (Assortment of Picks)
          ✔ should show price ($9.99)
          ✔ should show description (Picks for acoustic or electric players.)
          ✔ should show image of product (images/picks.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=7
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/8 - product page for Guitar Strings
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (81ms)
          ✔ should show name (Guitar Strings)
          ✔ should show price ($12.99)
          ✔ should show description (High quality wound strings for your acoustic or electric guitar or bass.)
          ✔ should show image of product (images/strings.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=8
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
        GET /product/9 - product page for Instrument Cable
          ✔ should return HTML
          ✔ should show login link instead of cart count if not logged in
          ✔ should show cart count if logged in (81ms)
          ✔ should show name (Instrument Cable)
          ✔ should show price ($19.99)
          ✔ should show description (A cable to connect an electric guitar or bass to an amplifier.)
          ✔ should show image of product (images/cable.jpg)
          ✔ should render a form that POSTs to /api/cart?inventoryId=9
          ✔ should render an "add to cart" button inside form
          ✔ should render a quantity input of type number set to 1 inside form
      GET /cart - cart page
        ✔ should return HTML if logged in
        ✔ should render "Cart" heading
        ✔ should render "return to store" link
        ✔ should render "empty cart" button
        ✔ should render total
        Cart Item: Stratocaster
          ✔ should render name
          ✔ should render image
          ✔ should render price
          ✔ should render quantity
          ✔ should render calculatedPrice (quantity * price)
          ✔ should render remove btn
        Cart Item: Strap
          ✔ should render name
          ✔ should render image
          ✔ should render price
          ✔ should render quantity
          ✔ should render calculatedPrice (quantity * price)
          ✔ should render remove btn
        Cart Item: Assortment of Picks
          ✔ should render name
          ✔ should render image
          ✔ should render price
          ✔ should render quantity
          ✔ should render calculatedPrice (quantity * price)
          ✔ should render remove btn
        Cart Item: Instrument Cable
          ✔ should render name
          ✔ should render image
          ✔ should render price
          ✔ should render quantity
          ✔ should render calculatedPrice (quantity * price)
          ✔ should render remove btn
        Cart Item: Mini Amp
          ✔ should render name
          ✔ should render image
          ✔ should render price
          ✔ should render quantity
          ✔ should render calculatedPrice (quantity * price)
          ✔ should render remove btn
      GET /login
        ✔ should return HTML for login page
      GET /create-account
        ✔ should return HTML for sign up page


  171 passing (3s)
  1 failing

  1) e-commerce site
       e-commerce api
         authentication
           POST /api/login with wrong username return 400:

      AssertionError: expected 404 to equal 400
      + expected - actual

      -404
      +400
      
      at Context.<anonymous> (test/tests.js:245:31)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)




> music_shop_auth@1.0.0 mysql:stop
> docker container stop mysql-sandbox

mysql-sandbox
